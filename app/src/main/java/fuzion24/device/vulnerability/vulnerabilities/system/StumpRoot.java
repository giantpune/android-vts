package fuzion24.device.vulnerability.vulnerabilities.system;

import android.content.Context;
import android.os.Build;
import android.util.Log;

import fuzion24.device.vulnerability.util.CPUArch;
import fuzion24.device.vulnerability.vulnerabilities.VulnerabilityTest;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

public class StumpRoot implements VulnerabilityTest  {

    @Override
    public List<CPUArch> getSupportedArchitectures() {
        ArrayList<CPUArch> archs = new ArrayList<CPUArch>();
        archs.add(CPUArch.ALL);
        return archs;
    }

    @Override
    public String getCVEorID() {
        return "StumpRoot";
    }

    @Override
    public boolean isVulnerable(Context context) throws Exception {
        return isLGPhone() && MMCPermissionsAreIncorrect();
    }

    private boolean MMCPermissionsAreIncorrect() throws Exception{
        String mmcBlk0Path = "/dev/block/mmcblk0";
        FileInfo mmcBlk0FileInfo = getFileInfo(mmcBlk0Path);
        return mmcBlk0FileInfo.group.equals("lg_fota");
    }

    private boolean isLGPhone(){
        return Build.MANUFACTURER.equals("LGE");
    }

    //Don't use this for things where you don't control filename.
    private FileInfo getFileInfo(String filename) throws Exception {
        try {
            Process proc = Runtime.getRuntime().exec("ls -l " + filename);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(proc.getOutputStream()));
            BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            String line = in.readLine();
            FileInfo fi = createFileInfo(line.split("\\s+"));
            proc.waitFor();
            in.close();
            out.close();
            return fi;
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    private static FileInfo createFileInfo(String... args) {
        FileInfo fi = null;
        Log.d("VULN_TEST", "ARGS len: " + args.length);
        if(args.length == 6) {
            fi = new FileInfo(args[0],args[1],args[2],args[3] +" "+ args[4],args[5]);
        } else if(args.length == 7) {
            fi = new FileInfo(args[0],args[1],args[2],args[3],args[4] +" "+ args[5],args[6]);
        } else if (args.length == 8) {
            fi = new FileInfo(args[0], args[1], args[2], args[4], args[5], args[7]);
        }
        return fi;
    }

    private static class FileInfo {
        private String permissions;
        private String owner;
        private String group;
        private String size;
        private String date;
        private String fileName;

        private FileInfo(String permissions, String owner, String group, String size, String date, String fileName) {
            this.permissions = permissions;
            this.owner = owner;
            this.group = group;
            this.size = size;
            this.date = date;
            this.fileName = fileName;
        }

        private FileInfo(String permissions, String owner, String group, String date, String fileName) {
            this.permissions = permissions;
            this.owner = owner;
            this.group = group;
            this.date = date;
            this.fileName = fileName;
        }
    }

}
